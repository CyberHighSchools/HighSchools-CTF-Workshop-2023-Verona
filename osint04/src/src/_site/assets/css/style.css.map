{"version":3,"sourceRoot":"","sources":["../../_sass/rouge-base16-dark.scss","../../_sass/_default_colors.scss","../../_sass/jekyll-theme-hacker.scss","../../_sass/typed.scss"],"names":[],"mappings":";AAAA;AAAA;AAAA;AAAA;AAOA;EAmBE,OCzBK;;AD2BL;EAAW;;AACX;EAAY;;AACZ;EACE,OC9BG;;ADgCL;EACE,OC9BO;ED+BP,kBCnCY;;ADqCd;EACE,OC9BG;;ADgCL;EACE,OC7BI;;AD+BN;EACE,OChCI;;ADkCN;EACE,OC9CG;;ADgDL;EACE,OC/Ce;;ADiDjB;EACE,OCrDY;;ADuDd;EACE,OC9CU;ED+CV;;AAEF;EACE,OC1DM;;AD4DR;EACI,OClDO;;ADoDX;EACE,OC/De;;ADiEjB;EACE,OC5DU;;AD8DZ;EACE,OC7DW;;AD+Db;EACE,OC/DI;;ADiEN;EACE,OCpEU;;ADsEZ;EACE,OC9Ee;;ADgFjB;EACE,OCjFe;;;ACcnB;EACE;EACA;EACA;EACA;EACA;EACA;EACA;;;AAGF;AAEA;EACE;EACA;;;AAGF;EACE;EACA;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;AAAA;AAAA;AAAA;AAAA;AAMA;EACE;EACA;EACA;EACA;EACA;;;AAGF;EACE;EACA;EACA;EACA;EACA;EACA;EAGA;EACA;;AA3DA;EAiDF;IAYI;;;;AAKJ;EACE;EACA;;;AAGF;EACE;EACA;EACA;;;AAGF;EACE;EACA;EACA;;;AAGF;AAAA;AAGA;EACE;EACA;;;AAEF;EACE;;;AAGF;EACE;EACA;EACA,OAvGO;EAwGP;EACA;;;AAKF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;EACE;;;AAGF;EACE;EACA;EACA;;;AAGF;EACE;EACA;EACA;EACA;;;AAGF;EACE;EACA;;;AAGF;EACE;;;AAGF;EACE,OD7Ie;EC8If;EACA;;;AAGF;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;AAGF;EACE;EACA;EACA;EACA;EACA;EACA;;;AAGF;EACE;EACA;;;AAGF;EACE;EACA;EACA;;;AAGF;EACE;;;AAGF;EACE;EACA;EACA;EACA;;;AAGF;AAAA;AAGA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;AAGF;EACE;;;AAGF;EACE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","sourcesContent":["/*\n   generated by rouge http://rouge.jneen.net/\n   original base16 by Chris Kempson (https://github.com/chriskempson/base16)\n*/\n\n@import \"default_colors\";\n\n.highlight {\n\n  $plaintext: $alto !default;\n  $string: $chelsea-cucumber !default;\n  $literal: $chelsea-cucumber !default;\n  $keyword: $bouquet !default;\n  $error-foreground: $cod-grey !default;\n  $error-background: $apple-blossom !default;\n  $comment: $grey !default;\n  $preprocessor: $rajah !default;\n  $name-space: $rajah !default;\n  $name-attribute: $hippie-blue !default;\n  $operator: $rajah !default;\n  $keyword-type: $raw-sienna !default;\n  $regex: $gulf-stream !default;\n  $string-escape: $potters-clay !default;\n  $deleted: $apple-blossom !default;\n  $header: $hippie-blue !default;\n\n  color: $plaintext;\n\n  table td { padding: 5px; }\n  table pre { margin: 0; }\n  .w {\n    color: $plaintext;\n  }\n  .err {\n    color: $error-foreground;\n    background-color: $error-background;\n  }\n  .c,  .cd,  .cm,  .c1,  .cs {\n    color: $comment;\n  }\n  .cp {\n    color: $preprocessor;\n  }\n  .o,  .ow {\n    color: $operator;\n  }\n  .p,  .pi {\n    color: $plaintext;\n  }\n  .gi {\n    color: $string;\n  }\n  .gd {\n    color: $deleted;\n  }\n  .gh {\n    color: $header;\n    font-weight: bold;\n  }\n  .k,  .kn,  .kp,  .kr,  .kv {\n    color: $keyword;\n  }\n  .kc, .kt, .kd {\n      color: $keyword-type;\n  }\n  .s,  .sb,  .sc,  .sd,  .s2,  .sh,  .sx,  .s1 {\n    color: $string;\n  }\n  .sr {\n    color: $regex;\n  }\n  .si, .se {\n    color: $string-escape;\n  }\n  .nt, .nn,  .nc, .no{\n    color: $name-space;\n  }\n  .na {\n    color: $name-attribute;\n  }\n  .m,  .mf,  .mh,  .mi,  .il,  .mo,  .mb,  .mx {\n    color: $literal;\n  }\n  .ss {\n    color: $string;\n  }\n}\n","$apple-blossom: #ac4142;\n$alto: #d0d0d0;\n$bouquet: #aa759f;\n$chelsea-cucumber: #f7c12a;\n$cod-grey: #151515;\n$conifer: #f7c12a;\n$dove-grey: #666;\n$gallery: #eaeaea;\n$grey: #888;\n$gulf-stream: #75b5aa;\n$hippie-blue: #6a9fb5;\n$potters-clay: #8f5536;\n$rajah: #f4bf75;\n$raw-sienna: #d28445;\n$silver-chalice: #aaa;\n","@import \"rouge-base16-dark\";\n@import \"default_colors\";\n@import \"typed\";\n\n$body-background: $cod-grey !default;\n$body-foreground: $gallery !default;\n$header: #e70000 !default;\n$blockquote-color: $silver-chalice !default;\n$blockquote-border: $dove-grey !default;\n$container-max-width: 1000px;\n\n@mixin media-max-width($max-width) {\n  @media (max-width: $max-width) {\n      @content;\n  }\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  background: #09080f;\n  color: #e70000;\n  font-size: 16px;\n  line-height: 1.5;\n  font-family: Monaco, \"Bitstream Vera Sans Mono\", \"Lucida Console\", Terminal, monospace;\n}\n\n/* General & 'Reset' Stuff */\n\n.container {\n  width: 100%;\n  margin: 0 auto;\n}\n\nsection {\n  display: block;\n  margin: 0 0 20px 0;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  margin: 0 0 20px;\n}\n\nli {\n  line-height: 1.4 ;\n}\n\n/* Header, <header>\n   header   - container\n   h1       - project name\n   h2       - project description\n*/\n\nheader {\n  background: rgba(0, 0, 0, 0.1);\n  width: 100%;\n  border-bottom: 1px dashed #e70000; //header;\n  padding: 20px 0;\n  margin: 0 0 40px 0;\n}\n\nheader h1 {\n  font-size: 30px;\n  line-height: 1.5;\n  margin: 0 0 0 -40px;\n  font-weight: bold;\n  font-family: Monaco, \"Bitstream Vera Sans Mono\", \"Lucida Console\", Terminal, monospace;\n  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1),\n               0 0 5px rgba(181, 232, 83, 0.1),\n               0 0 10px rgba(181, 232, 83, 0.1);\n  letter-spacing: -1px;\n  -webkit-font-smoothing: antialiased;\n  @include media-max-width($container-max-width) {\n    margin-left: 0;\n  }\n}\n\n\nheader h1:before {\n  content: \"~/ \";\n  font-size: 24px;\n}\n\nheader h2 {\n  font-size: 18px;\n  font-weight: 300;\n  color: #666;\n}\n\n#downloads .btn {\n  display: inline-block;\n  text-align: center;\n  margin: 0;\n}\n\n/* Main Content\n*/\n\n#main_content {\n  width: 100%;\n  -webkit-font-smoothing: antialiased;\n}\nsection img {\n  max-width: 100%\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-weight: bold;\n  font-family: Monaco, \"Bitstream Vera Sans Mono\", \"Lucida Console\", Terminal, monospace;\n  color: $header;\n  letter-spacing: -0.03em;\n  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1),\n               0 0 5px rgba(181, 232, 83, 0.1),\n               0 0 10px rgba(181, 232, 83, 0.1);\n}\n\n#main_content h1 {\n  font-size: 30px;\n}\n\n#main_content h2 {\n  font-size: 24px;\n}\n\n#main_content h3 {\n  font-size: 18px;\n}\n\n#main_content h4 {\n  font-size: 14px;\n}\n\n#main_content h5 {\n  font-size: 12px;\n  text-transform: uppercase;\n  margin: 0 0 5px 0;\n}\n\n#main_content h6 {\n  font-size: 12px;\n  text-transform: uppercase;\n  color: #999;\n  margin: 0 0 5px 0;\n}\n\ndt {\n  font-style: italic;\n  font-weight: bold;\n}\n\nul li {\n  list-style-image:url('../images/bullet.png');\n}\n\nblockquote {\n  color: $blockquote-color;\n  padding-left: 10px;\n  border-left: 1px dotted $blockquote-border;\n}\n\npre {\n  padding: 10px;\n  font-size: 0.6vw;\n  color: #E70000;\n  text-shadow: 2px -2px 20px rgba(155, 105, 235, 0.61);\n  border-radius: 2px;\n  word-wrap: normal;\n  overflow: auto;\n  overflow-y: hidden;\n}\n\ncode.highlighter-rouge {\n  background: rgba(0,0,0,0.9);\n  border: 1px solid rgba(255, 255, 255, 0.15);\n  padding: 0px 3px;\n  margin: 0px -3px;\n  color: #aa759f;\n  border-radius: 2px;\n}\n\ntable {\n  width: 100%;\n  margin: 0 0 20px 0;\n}\n\nth {\n  text-align: left;\n  border-bottom: 1px dashed #e70000;\n  padding: 5px 10px;\n}\n\ntd {\n  padding: 5px 10px;\n}\n\nhr {\n  height: 0;\n  border: 0;\n  border-bottom: 1px dashed #e70000;\n  color: #e70000;\n}\n\n/* Buttons\n*/\n\n.btn {\n  display: inline-block;\n  background: -webkit-linear-gradient(top, rgba(40, 40, 40, 0.3), rgba(35, 35, 35, 0.3) 50%, rgba(10, 10, 10, 0.3) 50%, rgba(0, 0, 0, 0.3));\n  padding: 8px 18px;\n  border-radius: 50px;\n  border: 2px solid rgba(0, 0, 0, 0.7);\n  border-bottom: 2px solid rgba(0, 0, 0, 0.7);\n  border-top: 2px solid rgba(0, 0, 0, 1);\n  color: rgba(255, 255, 255, 0.8);\n  font-family: Helvetica, Arial, sans-serif;\n  font-weight: bold;\n  font-size: 13px;\n  text-decoration: none;\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.75);\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.05);\n}\n\n.btn:hover {\n  background: -webkit-linear-gradient(top, rgba(40, 40, 40, 0.6), rgba(35, 35, 35, 0.6) 50%, rgba(10, 10, 10, 0.8) 50%, rgba(0, 0, 0, 0.8));\n}\n\n.btn .icon {\n  display: inline-block;\n  width: 16px;\n  height: 16px;\n  margin: 1px 8px 0 0;\n  float: left;\n}\n\n.btn-github .icon {\n  opacity: 0.6;\n  background: url(\"../images/blacktocat.png\") 0 0 no-repeat;\n}\n\n/* Links\n   a, a:hover, a:visited\n*/\n\na {\n  color: #e70000;\n  text-shadow: 0 0 5px rgba(104, 182, 255, 0.5);\n  padding-left: 10px; \n  padding-right: 10px;\n}\n\n/* Clearfix */\n\n.cf:before, .cf:after {\n  content:\"\";\n  display:table;\n}\n\n.cf:after {\n  clear:both;\n}\n\n.cf {\n  zoom:1;\n}\n\n#a-title {\n  text-decoration: none;\n}\n\n\n/* Added\n*/\n\n#left-column {\n  width: 40%;\n  float: left;\n}\n\n#right-column {\n  width: 60%;\n  float: right;\n}\n\n#writeup {\n  width: 70%;\n  padding-left: 10vw;\n  -webkit-font-smoothing: antialiased;\n}\n\n#sketchy-description {\n\tpadding: 0 0 0 3px;\n\tbackground-color: #e70000;\n\t&::before { font-weight: 600; }\n\t@include typed(\n\t\t\"CTF team based in Verona.\", \"threatening cybergang.\"\n\t);\n}\n","$__supports-first-class-calc: calc(1) == 1;\n@function __div($number1, $number2) {\n\t@if $__supports-first-class-calc {\n\t\t@return calc($number1 / $number2);\n\t} @else {\n\t\t@return $number1 / $number2;\n\t}\n}\n\n$__typed-pauses-chars: (fwd: \"\\200b\", bwd: \"\\200c\", both: \"\\feff\");\n@function __typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $string-nth, $char-nth, $modifier) {\n\t$string: nth($strings, $string-nth);\n\t$length: str-length($string);\n\t$fwd-string: __typed-remove-bwd-pause-chars($string);\n\t$fwd-length: str-length($fwd-string);\n\t$bwd-string: __typed-remove-fwd-pause-chars($string);\n\t$bwd-length: str-length($bwd-string);\n\t$combined-length: $fwd-length + $bwd-length;\n\t$strings-past: $string-nth - 1;\n\t$time: 0;\n\t@while $strings-past > 0 {\n\t\t$past-string: nth($strings, $strings-past);\n\t\t$past-length: str-length($past-string);\n\t\t$past-fwd-length: str-length(__typed-remove-bwd-pause-chars($past-string));\n\t\t$past-bwd-length: str-length(__typed-remove-fwd-pause-chars($past-string));\n\t\t$time: $time\n\t\t\t+ $dur-char-fwd * $past-fwd-length\n\t\t\t+ $dur-char-bwd * $past-bwd-length\n\t\t\t+ $dur-full-gap + $dur-done-gap;\n\t\t$strings-past: $strings-past - 1;\n\t}\n\t@if $char-nth <= $fwd-length {\n\t\t$time: $time\n\t\t\t+ $dur-char-fwd * ($char-nth - 1);\n\t} @else {\n\t\t$time: $time\n\t\t\t+ $dur-char-fwd * $fwd-length\n\t\t\t+ $dur-full-gap\n\t\t\t+ $dur-char-bwd * ($char-nth - $fwd-length);\n\t}\n\t@return (__div($time, $dur-total) * 100 + $modifier) + \"%\";\n}\n@function __typed-get-all-keys($lists...) {\n\t$all-keys: ();\n\t@each $list in $lists {\n\t\t@each $map in $list {\n\t\t\t@each $prop in map-keys($map) {\n\t\t\t\t$all-keys: append($all-keys, $prop, comma);\n\t\t\t}\n\t\t}\n\t}\n\t@return $all-keys;\n}\n@mixin __typed-write-to-content($string, $alt-text, $prefix: \"\") {\n\t// @supports (content: \"x\" / \"y\") {\n\t// \tcontent: $string / \"#{$alt-text}\";\n\t// }\n\t// @supports not (content: \"x\" / \"y\") {\n\t// \tcontent: $string;\n\t// \talt: \"#{$alt-text}\";\n\t// }\n\tcontent: \"​#{__typed-sanitize-pause-chars($prefix)}#{__typed-sanitize-pause-chars($string)}\";\n\tcontent: \"​#{__typed-sanitize-pause-chars($prefix)}#{__typed-sanitize-pause-chars($string)}\" / \"#{__typed-sanitize-pause-chars($alt-text)}\";\n\talt: \"#{__typed-sanitize-pause-chars($alt-text)}\";\n}\n@mixin __typed-spread-styles($styles: (), $nth: null, $addtl-styles...) {\n\t@if type-of($styles) == list {\n\t\t@if (length($styles) > 0 and $nth != null) or length($addtl-styles) > 0 {\n\t\t\t$all-props: __typed-get-all-keys($styles, $addtl-styles);\n\t\t\t@if length($styles) > 0 and $nth != null { $styles: nth($styles, $nth); }\n\t\t\t@if length($addtl-styles) > 0 {\n\t\t\t\t@each $style-group in $addtl-styles {\n\t\t\t\t\t// @error \"#{$style-group}\";\n\t\t\t\t\t$styles: map-merge($styles, $style-group);\n\t\t\t\t}\n\t\t\t}\n\t\t\t@each $prop in $all-props {\n\t\t\t\t$value: if(map-get($styles, $prop) == null, unset, map-get($styles, $prop));\n\t\t\t\t#{$prop}: if(type-of($value) == list, append($value, null, auto), $value);\n\t\t\t}\n\t\t}\n\t} @else if type-of($styles) == map {\n\t\t@if length(map-keys($styles)) > 0 {\n\t\t\t@each $prop, $value in $styles {\n\t\t\t\t#{$prop}: if(type-of($value) == list, append($value, null, auto), $value);\n\t\t\t}\n\t\t}\n\t} @else {\n\t\t@error \"__typed-spread-styles requires the $styles argument to be either a map or a list of maps.\";\n\t}\n}\n@mixin __typed-final-build-animation($dur-char-fwd, $string, $animation-name, $alt-text, $prefix, $end-styles: (), $styles: ()) {\n\t@keyframes #{$animation-name}-final {\n\t\t@for $i from 1 through str-length($string) {\n\t\t\t$modifier: .001;\n\t\t\t@if $i == 1 { $modifier: 0; }\n\t\t\t#{__div(($i - 1), str-length($string)) * 100 + $modifier}%, #{__div($i, str-length($string)) * 100}% {\n\t\t\t\t@include __typed-write-to-content(str-slice($string, 1, $i), $alt-text, $prefix);\n\t\t\t\t@if $i == str-length($string) {\n\t\t\t\t\t@include __typed-spread-styles(map-merge($styles, $end-styles));\n\t\t\t\t} @else {\n\t\t\t\t\t@include __typed-spread-styles($styles);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n@function __typed-instances-of($data, $search) {\n\t$instances: 0;\n\t@if type-of($data) == list or type-of($data) == map { @each $item in $data { @if $item == $search { $instances: $instances + 1; } } }\n\t@else if type-of($data) == string {\n\t\t@if type-of($search) != string { @error \"When searching a string using instances-of, your search argument must also be a string.\"; }\n\t\t@if str-length($search) < 1 { @error \"When searching a string using instances-of, your search string must be at least one character in length.\"; }\n\t\t@for $i from 1 through str-length($data) - str-length($search) + 1 { @if str-slice($data, $i, $i + str-length($search) - 1) == $search { $instances: $instances + 1; } }\n\t} @else { @error \"instances-of requires one parameter of type map, list, or string, and a second argument of the value searching for within that data.\"; }\n\t@return $instances;\n}\n@function __typed-instances-of-not($data, $search) {\n\t@if type-of($data) == list or type-of($data) == map { @return length($data) - __typed-instances-of($data, $search); }\n\t@else if type-of($data) == string { @return str-length($data) - __typed-instances-of($data, $search); }\n\t@else { @error \"instances-of requires one parameter of type map, list, or string, and a second argument of the value searching for within that data.\"; }\n}\n// ...\n//\n// CREDIT BEGIN :: aliased str-replace/to-length/to-number functions are courtesy of Kitty Giraudel (kittygiraudel.com)\n\t\t\t@function __typed-str-replace($string, $search, $replace: \"\") {\n\t\t\t\t$index: str-index($string, $search);\n\t\t\t\t@if $index { @return str-slice($string, 1, $index - 1) + $replace + __typed-str-replace(str-slice($string, $index + str-length($search)), $search, $replace); }\n\t\t\t\t@return $string;\n\t\t\t}\n\t\t\t@function __typed-to-length($value, $unit) {\n\t\t\t\t$units: (\"px\": 1px, \"cm\": 1cm, \"mm\": 1mm, \"%\": 1%, \"ch\": 1ch, \"pc\": 1pc, \"in\": 1in, \"em\": 1em, \"rem\": 1rem, \"pt\": 1pt, \"ex\": 1ex, \"vw\": 1vw, \"vh\": 1vh, \"vmin\": 1vmin, \"vmax\": 1vmax);\n\t\t\t\t@if not index(map-keys($units), $unit) { $_: log(\"Invalid unit `#{$unit}`.\"); }\n\t\t\t\t@return $value * map-get($units, $unit);\n\t\t\t}\n\t\t\t@function __typed-to-number($value) {\n\t\t\t\t@if type-of($value) == \"number\" { @return $value; }\n\t\t\t\t@else if type-of($value) != \"string\" { $_: log(\"Value for `__typed-to-number` should be a number or a string.\"); }\n\t\t\t\t$result: 0; $digits: 0; $minus: str-slice($value, 1, 1) == \"-\"; $numbers: (\"0\": 0, \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9);\n\t\t\t\t@for $i from if($minus, 2, 1) through str-length($value) {\n\t\t\t\t\t$character: str-slice($value, $i, $i);\n\t\t\t\t\t@if not (index(map-keys($numbers), $character) or $character == \".\") { @return __typed-to-length(if($minus, -$result, $result), str-slice($value, $i)) }\n\t\t\t\t\t@if $character == \".\" { $digits: 1; }\n\t\t\t\t\t@else if $digits == 0 { $result: $result * 10 + map-get($numbers, $character); }\n\t\t\t\t\t@else { $digits: $digits * 10; $result: $result + __div(map-get($numbers, $character), $digits); }\n\t\t\t\t}\n\t\t\t\t@return if($minus, -$result, $result);\n\t\t\t}\n// CREDIT END\n//\n// ...\n@function __typed-str-replace-multi($string, $searches, $replace: \"\") {\n\t@each $search in $searches { $string: __typed-str-replace($string, $search, $replace); }\n\t@return $string;\n}\n@function __typed-remove-pause-chars($str) { @return __typed-str-replace-multi($str, map-values($__typed-pauses-chars)); }\n@function __typed-remove-fwd-pause-chars($str) { @return __typed-str-replace($str, map-get($__typed-pauses-chars, fwd)); }\n@function __typed-remove-bwd-pause-chars($str) { @return __typed-str-replace($str, map-get($__typed-pauses-chars, bwd)); }\n@function __typed-remove-both-pause-chars($str) { @return __typed-str-replace($str, map-get($__typed-pauses-chars, both)); }\n@function __typed-sanitize-pause-chars($str) { @return __typed-remove-pause-chars(__typed-inject-pauses($str)); }\n@function __typed-inject-pauses($str, $default-mode: \"fwd\") {\n\t@while str-index($str, \"<[\") != null and str-index($str, \"]>\") != null and str-index($str, \"]>\") > str-index($str, \"<[\") {\n\t\t$start: str-index($str, \"<[\"); $end: str-index($str, \"]>\");\n\t\t$is-fwd: str-slice($str, $start + 2, $start + 2) == \"_\";\n\t\t$is-bwd: str-slice($str, $end - 1, $end - 1) == \"_\";\n\t\t$is-both: $is-fwd and $is-bwd;\n\t\t$space-char:\n\t\t\tif($is-both,\n\t\t\t\tmap-get($__typed-pauses-chars, both),\n\t\t\t\tif($is-bwd,\n\t\t\t\t\tmap-get($__typed-pauses-chars, bwd),\n\t\t\t\t\tif($is-fwd,\n\t\t\t\t\t\tmap-get($__typed-pauses-chars, fwd),\n\t\t\t\t\t\tmap-get($__typed-pauses-chars, $default-mode)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t$value: __typed-to-number(str-slice($str, $start + if($is-fwd, 3, 2), $end - if($is-bwd, 2, 1)));\n\t\t$spaces: \"\"; @for $i from 0 to $value { $spaces: $spaces + $space-char; }\n\t\t$str: str-slice($str, 1, $start - 1) + $spaces + str-slice($str, $end + 2, -1);\n\t}\n\t@return $str;\n}\n$__typed-id: 0;\n@mixin typed($parameters...) {\n\t$strings: ();\n\t$strings-styles: ();\n\t$final-string-styles: ();\n\t$speeds: (\n\t\ttype: .1,\n\t\tpause-typed: 2,\n\t\tdelete: .08,\n\t\tpause-deleted: 1\n\t);\n\t$options: (\n\t\tname: \"\",\n\t\titerations: infinite,\n\t\tcaret: true,\n\t\tcaret-speed: .75,\n\t\tcaret-width: 1ch,\n\t\tcaret-color: currentColor,\n\t\tcaret-space: .1ch,\n\t\tstyles: (),\n\t\tend-styles: (),\n\t\tdelay: 1,\n\t\ttype-pausing: true,\n\t\ttype-pausing-default: \"fwd\",\n\t\tprefix: \"\",\n\t\tend-on: \"\",\n\t\talt-text: \"\"\n\t);\n\t$strings-complete: false;\n\t$speeds-complete: false;\n\t$options-complete: false;\n\t$parameter-nth: 1;\n\t@each $parameter in $parameters {\n\t\t@if not $strings-complete {\n\t\t\t@if $parameter-nth == 1 and type-of($parameter) == map {\n\t\t\t\t$strings: join($strings, map-keys($parameter));\n\t\t\t\t$strings-styles: join($strings-styles, map-values($parameter));\n\t\t\t\t$strings-complete: true;\n\t\t\t} @else if type-of($parameter) == string {\n\t\t\t\t$strings: append($strings, $parameter);\n\t\t\t} @else {\n\t\t\t\t@error \"Strings are required in the formats of either separate sequential string arguments, or a single map with each string represented as the key of its own map of associated styles.\";\n\t\t\t}\n\t\t\t@if length($parameters) > $parameter-nth and type-of(nth($parameters, $parameter-nth + 1)) != string {\n\t\t\t\t$strings-complete: true;\n\t\t\t}\n\t\t} @else if not $speeds-complete {\n\t\t\t@if type-of($parameter) == map {\n\t\t\t\t@each $key, $value in $parameter {\n\t\t\t\t\t@if map-get($speeds, $key) == null {\n\t\t\t\t\t\t@error \"#{$key} is not a valid speed property. Accepted speed property keys are #{append(map-keys($speeds), null, comma)}.\";\n\t\t\t\t\t}\n\t\t\t\t\t@if type-of($value) != number {\n\t\t\t\t\t\t@error \"The value #{$value} is not a number.\";\n\t\t\t\t\t}\n\t\t\t\t\t$speeds: map-merge($speeds, ($key: $value));\n\t\t\t\t}\n\t\t\t} @else if type-of($parameter) == list {\n\t\t\t\t@if length($parameter) > 4 {\n\t\t\t\t\t@error \"The speed list argument only accepts 4 numbers when used a list.\";\n\t\t\t\t}\n\t\t\t\t@for $i from 1 through length($parameter) {\n\t\t\t\t\t@if nth($parameter, $i) != null and type-of(nth($parameter, $i)) != number {\n\t\t\t\t\t\t@error \"The value #{$value} is not a number.\";\n\t\t\t\t\t}\n\t\t\t\t\t@if nth($parameter, $i) != null {\n\t\t\t\t\t\t$speeds: map-merge($speeds, (nth(map-keys($speeds), $i): nth($parameter, $i)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} @else if type-of($parameter) == number {\n\t\t\t\t@if $parameter <= 0 {\n\t\t\t\t\t@error \"When passing a numeric value into the $speeds argument, it works as a multiplier and thereby requires a positive non-zero number (integer or float). To slow down the default speed, use a decimal number between 0 and 1. To speed up the default speed, use a number greater than 1. A value of 0.5 will reduce the speed by 50%, where a value of 2 will double the speed.\";\n\t\t\t\t}\n\t\t\t\t@each $key, $value in $speeds {\n\t\t\t\t\t$speeds: map-merge($speeds, ($key: $value * __div(1, $parameter)));\n\t\t\t\t}\n\t\t\t} @else if $parameter != null {\n\t\t\t\t@error \"The speed argument requires either a map, list, or null value.\"\n\t\t\t}\n\t\t\t$speeds-complete: true;\n\t\t} @else if not $options-complete {\n\t\t\t@if $parameter != null {\n\t\t\t\t@if type-of($parameter) != map {\n\t\t\t\t\t@error \"#{$key} is not a valid options configuration map.\";\n\t\t\t\t}\n\t\t\t\t@each $key, $value in $parameter {\n\t\t\t\t\t@if map-get($options, $key) == null {\n\t\t\t\t\t\t@error \"#{$key} is not a valid options property. Accepted options property keys are #{append(map-keys($options), null, comma)}.\";\n\t\t\t\t\t}\n\t\t\t\t\t@if $key == iterations {\n\t\t\t\t\t\t@if $value != infinite and (type-of($value) == number and ($value < 0 or $value != round($value))) {\n\t\t\t\t\t\t\t@error \"The iterations value #{$value} requires a positive integer or infinite.\";\n\t\t\t\t\t\t}\n\t\t\t\t\t} @else if $key == end-on {\n\t\t\t\t\t\t@if type-of($value) == map {\n\t\t\t\t\t\t\t@if length($value) != 1 {\n\t\t\t\t\t\t\t\t@error \"When using the end-on property as a map, the map must house a single value, also a map, with the map value containing the SCSS styles to apply to the end-on string.\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t@each $end-on, $end-on-styles in $value {\n\t\t\t\t\t\t\t\t@if type-of($end-on) == string {\n\t\t\t\t\t\t\t\t\t@if $end-on == \"\" {\n\t\t\t\t\t\t\t\t\t\t@error \"The end-on property requires a non-empty string.\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} @else if type-of($end-on) == number {\n\t\t\t\t\t\t\t\t\t@if $end-on < 0 or $end-on > length($strings) or $end-on != round($end-on) {\n\t\t\t\t\t\t\t\t\t\t@error \"If using a numeric end-on property value, it must be a positive integer between 1 and the number of the strings being used.\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$end-on: nth($strings, $end-on);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$final-string-styles: $end-on-styles;\n\t\t\t\t\t\t\t\t$value: $end-on;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} @else if type-of($value) == string {\n\t\t\t\t\t\t\t@if $value == \"\" {\n\t\t\t\t\t\t\t\t@error \"The end-on property requires a non-empty string.\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} @else if type-of($value) == number {\n\t\t\t\t\t\t\t@if $value < 0 or $value > length($strings) or $value != round($value) {\n\t\t\t\t\t\t\t\t@error \"If using a numeric end-on property value, it must be a positive integer between 1 and the number of the strings being used.\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$value: nth($strings, $value);\n\t\t\t\t\t\t}\n\t\t\t\t\t} @else if $key == caret-color {\n\t\t\t\t\t\t@if $value != currentColor and type-of($value) != color {\n\t\t\t\t\t\t\t@error \"The caret-color property requires a value of type color, or currentColor.\";\n\t\t\t\t\t\t}\n\t\t\t\t\t} @else if ($key == styles or $key == end-styles) and not type-of($value) != map {\n\t\t\t\t\t\t@if type-of($value) != map {\n\t\t\t\t\t\t\t@error \"The #{$key} property requires a value of type map.\";\n\t\t\t\t\t\t}\n\t\t\t\t\t} @else if $key == type-pausing-default {\n\t\t\t\t\t\t@if type-of($value) != string or ($value != \"fwd\" and $value != \"bwd\" and $value != \"both\") {\n\t\t\t\t\t\t\t@error \"The #{$key} property requires a value of either \\\"fwd\\\", \\\"bwd\\\", or \\\"both\\\".\";\n\t\t\t\t\t\t}\n\t\t\t\t\t} @else if type-of($value) != type-of(map-get($options, $key)) {\n\t\t\t\t\t\t@error \"The #{$key} value #{$value} of type #{type-of($value)} does not match the required type #{type-of(map-get($options, $key))}.\";\n\t\t\t\t\t}\n\t\t\t\t\t$options: map-merge($options, ($key: $value));\n\t\t\t\t}\n\t\t\t\t@if map-get($options, end-on) != \"\" and map-get($options, iterations) == infinite {\n\t\t\t\t\t@warn \"The end-on string will only be rendered when iterating a finite number of times. The current animation has an iterations value of infinite so the end-on value will be ignored and never rendered.\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t$options-complete: true;\n\t\t} @else {\n\t\t\t@error \"No additional arguments are permitted after the options object.\";\n\t\t}\n\t\t$parameter-nth: $parameter-nth + 1;\n\t}\n\t$dur-char-fwd: map-get($speeds, type);\n\t$dur-full-gap: map-get($speeds, pause-typed);\n\t$dur-char-bwd: map-get($speeds, delete);\n\t$dur-done-gap: map-get($speeds, pause-deleted);\n\t$animation-delay: map-get($options, delay);\n\t$final-string: __typed-inject-pauses(if(map-get($options, end-on) != \"\", map-get($options, end-on), nth($strings, 1)));\n\t$alt-text: if(map-get($options, alt-text) != \"\", map-get($options, alt-text), $final-string);\n\t$caret-width: map-get($options, caret-width);\n\t$caret-color: map-get($options, caret-color);\n\t$caret-space: map-get($options, caret-space);\n\t$caret-speed: map-get($options, caret-speed);\n\t$global-styles: map-get($options, styles);\n\t$end-styles: map-get($options, end-styles);\n\t$type-pausing: map-get($options, type-pausing);\n\t$type-pausing-default: map-get($options, type-pausing-default);\n\t$prefix: map-get($options, prefix);\n\t@if $type-pausing {\n\t\t@for $nth from 1 through length($strings) {\n\t\t\t$strings: set-nth($strings, $nth, __typed-inject-pauses(nth($strings, $nth), $type-pausing-default));\n\t\t}\n\t}\n\t@if $caret-speed < 0s {\n\t\t@error \"Delay requires a positive number value (integer or float) without units. #{$caret-speed} is less than 0.\";\n\t}\n\t@if $animation-delay < 0s {\n\t\t@error \"Delay requires a positive number value (integer or float) without units. #{$animation-delay} is less than 0.\";\n\t}\n\t$iterations: map-get($options, iterations);\n\t// initializing some values ✊🏼\n\t$animation-name: \"\";\n\t@if map-get($options, name) != \"\" {\n\t\t$animation-name: #{map-get($options, name)};\n\t} @else {\n\t\t$animation-name: typed-#{$__typed-id};\n\t\t$__typed-id: $__typed-id + 1 !global;\n\t}\n\t$dur-total: 0;\n\t@each $string in $strings {\n\t\t$fwd-length: str-length(__typed-remove-bwd-pause-chars($string));\n\t\t$bwd-length: str-length(__typed-remove-fwd-pause-chars($string));\n\t\t$dur-total: $dur-total\n\t\t\t+ $dur-char-fwd * $fwd-length\n\t\t\t+ $dur-full-gap\n\t\t\t+ $dur-char-bwd * $bwd-length\n\t\t\t+ $dur-done-gap\n\t}\n\t&::before {\n\t\t@include __typed-write-to-content(\"\", $alt-text, $prefix);\n\t\twhite-space: break-spaces;\n\t\twill-change: content;\n\t\t@if $iterations == infinite {\n\t\t\tanimation: #{$animation-name} #{$dur-total}s linear #{$animation-delay}s #{$iterations} forwards;\n\t\t} @else {\n\t\t\tanimation:\n\t\t\t\t#{$animation-name} #{$dur-total}s linear #{$animation-delay}s #{$iterations} forwards,\n\t\t\t\t#{$animation-name}-final #{str-length($final-string) * $dur-char-fwd}s linear #{$dur-total * $iterations + $animation-delay}s 1 forwards;\n\t\t\t@include __typed-final-build-animation($dur-char-fwd, $final-string, $animation-name, $alt-text, $prefix, $end-styles, map-merge($global-styles, $final-string-styles));\n\t\t}\n\t}\n\t@if map-get($options, caret) {\n\t\t&::after {\n\t\t\tcontent: \"​\";\n\t\t\tposition: relative;\n\t\t\tdisplay: inline-block;\n\t\t\tpadding-right: $caret-space;\n\t\t\tborder-right: #{$caret-width} solid #{$caret-color};\n\t\t\twhite-space: nowrap;\n\t\t\tanimation: #{$animation-name}-caret #{$caret-speed}s linear #{$animation-delay}s infinite forwards;\n\t\t}\n\t}\n\t// now THIS is where the magic happens... ✨\n\t@keyframes #{$animation-name} {\n\t\t@for $i from 1 through length($strings) {\n\t\t\t$string: nth($strings, $i);\n\t\t\t$fwd-string: __typed-remove-bwd-pause-chars($string);\n\t\t\t$fwd-length: str-length($fwd-string);\n\t\t\t$bwd-string: __typed-remove-fwd-pause-chars($string);\n\t\t\t$bwd-length: str-length($bwd-string);\n\t\t\t$combined-length: $fwd-length + $bwd-length;\n\t\t\t@for $j from 1 through $combined-length {\n\t\t\t\t@if $j < $combined-length {\n\t\t\t\t\t#{__typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $i, $j, 0)}, #{__typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $i, $j+1, -.001)} {\n\t\t\t\t\t\t@if $j <= $fwd-length {\n\t\t\t\t\t\t\t@include __typed-write-to-content(\"#{str-slice($fwd-string, 1, $j)}\", $alt-text, $prefix);\n\t\t\t\t\t\t} @else {\n\t\t\t\t\t\t\t@include __typed-write-to-content(\"#{str-slice($bwd-string, 1, $bwd-length - ($j - $fwd-length))}\", $alt-text, $prefix);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t@include __typed-spread-styles($strings-styles, $i, $global-styles);\n\t\t\t\t\t}\n\t\t\t\t} @else {\n\t\t\t\t\t@if $i < length($strings) {\n\t\t\t\t\t\t#{__typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $i, $j, 0)}, #{__typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $i+1, 1, -.001)} {\n\t\t\t\t\t\t\t@include __typed-write-to-content(\"\", $alt-text, $prefix);\n\t\t\t\t\t\t\t@include __typed-spread-styles($strings-styles, $i, $global-styles);\n\t\t\t\t\t\t}\n\t\t\t\t\t} @else {\n\t\t\t\t\t\t#{__typed-percent-calc($dur-char-fwd, $dur-full-gap, $dur-char-bwd, $dur-done-gap, $dur-total, $strings, $i, $j, 0)}, 100% {\n\t\t\t\t\t\t\t@include __typed-write-to-content(\"\", $alt-text, $prefix);\n\t\t\t\t\t\t\t@include __typed-spread-styles($strings-styles, $i, $global-styles);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t@if map-get($options, caret) {\n\t\t@keyframes #{$animation-name}-caret {\n\t\t\t75% { border-color: transparent; }\n\t\t}\n\t}\n}"],"file":"style.css"}